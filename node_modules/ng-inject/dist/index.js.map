{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"kYAawB,MAAM,CAAf,SAAS,MAAM,EAAU,wCAAN,IAAI,yCAAJ,IAAI,0BACrC,IAAI,GAAG,QAAA,EAAE,EAAC,MAAM,MAAA,MAAI,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,AAEzC,OAAO,SAAC,MAAM,CAAE,IAAI,CAAE,UAAU,CAAK,CACpC,SAAS,SAAS,EAAU,gCAAN,IAAI,8CAAJ,IAAI,4BACzB,IAAI,QAAQ,CAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAE,IAAI,CAAC,MAAM,CAAC,CAAC,AAC3C,IAAK,IAAI,CAAC,CAAC,CAAC,CAAE,CAAC,GAAC,QAAQ,CAAC,MAAM,CAAE,CAAC,EAAE,EAAE,CACrC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CACxC,AACD,wBAAW,MAAM,eAAI,IAAI,MAAE,CAC3B,AACD,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,AACvC,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC,AACzB,OAAO,SAAS,CAAC,CACjB,CAAC,CACF,AAID,IAAM,MAAM,CAAG,SAAT,MAAM,CAAG,CAAC,SAAI,CAAC,CAAC,CAAC,EAAA,CAAC","file":"index.js","sourcesContent":["\n/** Decorator that wraps a class in a DI injector for the given dependneices.\n *\tDependencies are referencable from within the Class as `this.$whatever`\n *\n *\t@example\n *\t@inject('$scope', 'config')\n *\tclass ExampleController {\n *\t\texampleMethod() {\n *\t\t\t// both `$scope` and `config` are injected via DI:\n *\t\t\tthis.$scope.config = this.config;\n *\t\t}\n *\t}\n */\nexport default function inject(...deps) {\n\tdeps = [].concat(...deps).filter(EXISTS);\n\n\treturn (target, name, descriptor) => {\n\t\tfunction diWrapper(...args) {\n\t\t\tlet resolved = args.splice(0, deps.length);\n\t\t\tfor (let i=0; i<resolved.length; i++) {\n\t\t\t\ttarget.prototype[deps[i]] = resolved[i];\n\t\t\t}\n\t\t\treturn new target(...args);\n\t\t}\n\t\tdiWrapper.prototype = target.prototype;\n\t\tdiWrapper.$inject = deps;\n\t\treturn diWrapper;\n\t};\n}\n\n\n/** Returns its argument cast to a Boolean. */\nconst EXISTS = x => !!x;\n"]}